import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get activity_Focus => "Focus";
  String get activity_application_of_amway => "Application of amway";
  String get activity_comments => "comments";
  String get activity_development_tools => "Development tools";
  String get activity_internal_recruitment => "Internal recruitment";
  String get activity_like => "support";
  String get activity_new_information => "New information";
  String get activity_open_source_project => "Open source project ";
  String get activity_share => "share";
  String get activity_the_nuggets_dating => "Blind date";
  String get activity_working_fish => "Working fish";
  String get app_title => "JueJin";
  String get appbar_search_placeholder => "Search for articles, users, labels";
  String get book_all => "All";
  String get book_already_bought => "Already bought";
  String get book_people_have_bought => "people have bought";
  String get book_section => "sections";
  String get explore_activity_list => "Activity";
  String get explore_article_list => "Article";
  String get explore_author_list => "Author";
  String get explore_custom_hot => "Custom hot";
  String get explore_look_list => "Look";
  String get explore_people_like_to => "people like to";
  String get explore_popular_articles => "Top articles";
  String get explore_topic_square => "Topic";
  String get home_tab_1 => "POPULAR";
  String get home_tab_2 => "NEWEST";
  String get home_tab_3 => "THREE_DAYS_HOTTEST";
  String get home_tag => "Tags";
  String get me_already_bought_small_volumes => "already bought small volumes";
  String get me_collection => "collection";
  String get me_day_mode => "day mode";
  String get me_feedback => "feedback";
  String get me_label_management => "label management";
  String get me_login_subtitle_placeholder => "Add position @ add company";
  String get me_login_title_placeholder => "Login/registration";
  String get me_message_center => "message center";
  String get me_my_like => "i praise";
  String get me_night_mode => "night mode";
  String get me_read_the_article => "read the article";
  String get me_setting => "setting";
  String get me_title => "Me";
  String get widget_empty_text => "no content";
  String get widget_loading_more => "loading more...";
  String get widget_no_more_content => "no more content";
}

class $en extends S {
  const $en();
}

class $zh_CN extends S {
  const $zh_CN();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get activity_internal_recruitment => "内部招聘";
  @override
  String get activity_development_tools => "开发工具";
  @override
  String get book_people_have_bought => "人已购买";
  @override
  String get home_tab_1 => "热门";
  @override
  String get activity_the_nuggets_dating => "掘金相亲";
  @override
  String get activity_share => "分享";
  @override
  String get book_all => "全部";
  @override
  String get home_tab_2 => "最新";
  @override
  String get home_tab_3 => "热榜";
  @override
  String get explore_topic_square => "话题广场";
  @override
  String get activity_working_fish => "上班摸鱼";
  @override
  String get me_collection => "收藏集";
  @override
  String get widget_empty_text => "暂无内容";
  @override
  String get book_section => "小节";
  @override
  String get activity_new_information => "New资讯";
  @override
  String get explore_popular_articles => "热门文章";
  @override
  String get appbar_search_placeholder => "搜索文章、用户、标签";
  @override
  String get me_title => "我";
  @override
  String get me_message_center => "消息中心";
  @override
  String get me_feedback => "意见反馈";
  @override
  String get me_label_management => "标签管理";
  @override
  String get me_setting => "设置";
  @override
  String get activity_application_of_amway => "应用安利";
  @override
  String get explore_author_list => "作者榜";
  @override
  String get me_my_like => "我赞过的";
  @override
  String get explore_people_like_to => "人喜欢";
  @override
  String get explore_activity_list => "活动";
  @override
  String get activity_comments => "评论";
  @override
  String get app_title => "掘金";
  @override
  String get explore_look_list => "看一看";
  @override
  String get me_login_title_placeholder => "登录/注册";
  @override
  String get me_read_the_article => "阅读过的文章";
  @override
  String get explore_custom_hot => "定制热门";
  @override
  String get me_night_mode => "夜间模式";
  @override
  String get book_already_bought => "已购";
  @override
  String get home_tag => "标签";
  @override
  String get activity_open_source_project => "开源项目";
  @override
  String get me_day_mode => "白天模式";
  @override
  String get me_login_subtitle_placeholder => "添加职位@ 添加公司";
  @override
  String get explore_article_list => "文章榜";
  @override
  String get activity_Focus => "关注";
  @override
  String get widget_loading_more => "加载中...";
  @override
  String get me_already_bought_small_volumes => "已购小册";
  @override
  String get activity_like => "赞";
  @override
  String get widget_no_more_content => "没有更多内容";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
      Locale("zh", "CN"),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        case "zh_CN":
          S.current = const $zh_CN();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
